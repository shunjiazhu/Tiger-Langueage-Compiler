
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Dec 04 01:34:42 CST 2016
//----------------------------------------------------

package Parse;

import Absyn.*;

/** CUP v0.10k generated parser.
  * @version Sun Dec 04 01:34:42 CST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\004\003\000\002\003" +
    "\007\000\002\003\006\000\002\003\003\000\002\003\012" +
    "\000\002\003\006\000\002\003\006\000\002\003\010\000" +
    "\002\003\006\000\002\003\005\000\002\003\010\000\002" +
    "\003\006\000\002\003\005\000\002\003\005\000\002\003" +
    "\004\000\002\003\003\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\005\003\000" +
    "\002\005\005\000\002\006\003\000\002\006\005\000\002" +
    "\020\005\000\002\020\007\000\002\021\003\000\002\021" +
    "\005\000\002\021\006\000\002\021\006\000\002\010\003" +
    "\000\002\010\004\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\012\003\000\002\012\004\000\002" +
    "\011\006\000\002\016\003\000\002\016\005\000\002\016" +
    "\004\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\003\000\002\016\003\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\007\000\002" +
    "\017\007\000\002\017\007\000\002\013\010\000\002\013" +
    "\006\000\002\013\010\000\002\013\010\000\002\015\003" +
    "\000\002\015\004\000\002\014\013\000\002\014\013\000" +
    "\002\014\013\000\002\014\011\000\002\014\012\000\002" +
    "\014\012\000\002\014\012\000\002\014\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\030\004\014\005\011\006\005\014\016\022" +
    "\004\037\013\042\006\043\007\046\017\052\021\053\010" +
    "\001\002\000\030\004\014\005\011\006\005\014\016\022" +
    "\004\037\013\042\006\043\007\046\017\052\021\053\010" +
    "\001\002\000\070\002\uffe0\007\uffe0\011\uffe0\013\uffe0\015" +
    "\uffe0\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\040\uffe0\041\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\001\002\000\030\004\014\005" +
    "\011\006\005\014\016\022\004\037\013\042\006\043\007" +
    "\046\017\052\021\053\010\001\002\000\004\004\247\001" +
    "\002\000\070\002\uffe2\007\uffe2\011\uffe2\013\uffe2\015\uffe2" +
    "\017\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\040\uffe2\041\uffe2\044\uffe2\045\uffe2\047\uffe2\050\uffe2\054" +
    "\uffe2\055\uffe2\056\uffe2\001\002\000\070\002\uffe1\007\uffe1" +
    "\011\uffe1\013\uffe1\015\uffe1\017\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\040\uffe1\041\uffe1\044\uffe1\045" +
    "\uffe1\047\uffe1\050\uffe1\054\uffe1\055\uffe1\056\uffe1\001\002" +
    "\000\004\002\246\001\002\000\030\004\014\005\011\006" +
    "\005\014\016\022\004\037\013\042\006\043\007\046\017" +
    "\052\021\053\010\001\002\000\102\002\uffd9\007\uffd9\011" +
    "\uffd9\012\216\013\uffd9\014\215\015\uffd9\016\214\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\040\uffd9\041\uffd9\044\uffd9\045\uffd9\047\uffd9\050" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\001\002\000\034\002\000" +
    "\021\034\022\026\023\037\024\030\025\033\026\032\027" +
    "\040\030\035\031\036\032\031\033\027\034\041\001\002" +
    "\000\032\004\014\005\011\006\005\014\016\015\211\022" +
    "\004\037\013\042\006\043\007\046\017\052\021\053\010" +
    "\001\002\000\010\054\072\055\065\056\066\001\002\000" +
    "\076\002\ufff1\007\ufff1\011\ufff1\012\022\013\ufff1\015\ufff1" +
    "\017\ufff1\020\023\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\024\040\ufff1\041\ufff1\044\ufff1\045\ufff1\047" +
    "\ufff1\050\ufff1\054\ufff1\055\ufff1\056\ufff1\001\002\000\070" +
    "\002\ufffd\007\ufffd\011\ufffd\013\ufffd\015\ufffd\017\ufffd\021" +
    "\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\040\ufffd\041" +
    "\ufffd\044\ufffd\045\ufffd\047\ufffd\050\ufffd\054\ufffd\055\ufffd" +
    "\056\ufffd\001\002\000\030\004\014\005\011\006\005\014" +
    "\016\022\004\037\013\042\006\043\007\046\017\052\021" +
    "\053\010\001\002\000\004\004\056\001\002\000\030\004" +
    "\014\005\011\006\005\014\016\022\004\037\013\042\006" +
    "\043\007\046\017\052\021\053\010\001\002\000\070\002" +
    "\ufff0\007\ufff0\011\ufff0\013\ufff0\015\ufff0\017\ufff0\021\034" +
    "\022\026\023\037\024\030\025\033\026\032\027\040\030" +
    "\035\031\036\032\031\033\027\034\041\040\ufff0\041\ufff0" +
    "\044\ufff0\045\ufff0\047\ufff0\050\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\001\002\000\030\004\014\005\011\006\005\014\016" +
    "\022\004\037\013\042\006\043\007\046\017\052\021\053" +
    "\010\001\002\000\030\004\014\005\011\006\005\014\016" +
    "\022\004\037\013\042\006\043\007\046\017\052\021\053" +
    "\010\001\002\000\030\004\014\005\011\006\005\014\016" +
    "\022\004\037\013\042\006\043\007\046\017\052\021\053" +
    "\010\001\002\000\030\004\014\005\011\006\005\014\016" +
    "\022\004\037\013\042\006\043\007\046\017\052\021\053" +
    "\010\001\002\000\030\004\014\005\011\006\005\014\016" +
    "\022\004\037\013\042\006\043\007\046\017\052\021\053" +
    "\010\001\002\000\030\004\014\005\011\006\005\014\016" +
    "\022\004\037\013\042\006\043\007\046\017\052\021\053" +
    "\010\001\002\000\030\004\014\005\011\006\005\014\016" +
    "\022\004\037\013\042\006\043\007\046\017\052\021\053" +
    "\010\001\002\000\030\004\014\005\011\006\005\014\016" +
    "\022\004\037\013\042\006\043\007\046\017\052\021\053" +
    "\010\001\002\000\030\004\014\005\011\006\005\014\016" +
    "\022\004\037\013\042\006\043\007\046\017\052\021\053" +
    "\010\001\002\000\030\004\014\005\011\006\005\014\016" +
    "\022\004\037\013\042\006\043\007\046\017\052\021\053" +
    "\010\001\002\000\030\004\014\005\011\006\005\014\016" +
    "\022\004\037\013\042\006\043\007\046\017\052\021\053" +
    "\010\001\002\000\030\004\014\005\011\006\005\014\016" +
    "\022\004\037\013\042\006\043\007\046\017\052\021\053" +
    "\010\001\002\000\070\002\uffef\007\uffef\011\uffef\013\uffef" +
    "\015\uffef\017\uffef\021\034\022\026\023\037\024\030\025" +
    "\033\026\032\027\040\030\035\031\036\032\031\033\027" +
    "\034\uffef\040\uffef\041\uffef\044\uffef\045\uffef\047\uffef\050" +
    "\uffef\054\uffef\055\uffef\056\uffef\001\002\000\054\002\uffec" +
    "\007\uffec\011\uffec\013\uffec\015\uffec\017\uffec\021\034\022" +
    "\026\023\037\024\030\033\uffec\034\uffec\040\uffec\041\uffec" +
    "\044\uffec\045\uffec\047\uffec\050\uffec\054\uffec\055\uffec\056" +
    "\uffec\001\002\000\070\002\uffe6\007\uffe6\011\uffe6\013\uffe6" +
    "\015\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\040\uffe6\041\uffe6\044\uffe6\045\uffe6\047\uffe6\050" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\001\002\000\054\002\uffea" +
    "\007\uffea\011\uffea\013\uffea\015\uffea\017\uffea\021\034\022" +
    "\026\023\037\024\030\033\uffea\034\uffea\040\uffea\041\uffea" +
    "\044\uffea\045\uffea\047\uffea\050\uffea\054\uffea\055\uffea\056" +
    "\uffea\001\002\000\054\002\uffeb\007\uffeb\011\uffeb\013\uffeb" +
    "\015\uffeb\017\uffeb\021\034\022\026\023\037\024\030\033" +
    "\uffeb\034\uffeb\040\uffeb\041\uffeb\044\uffeb\045\uffeb\047\uffeb" +
    "\050\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002\000\070\002" +
    "\uffe7\007\uffe7\011\uffe7\013\uffe7\015\uffe7\017\uffe7\021\uffe7" +
    "\022\uffe7\023\037\024\030\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\040\uffe7\041\uffe7" +
    "\044\uffe7\045\uffe7\047\uffe7\050\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\001\002\000\054\002\uffed\007\uffed\011\uffed\013\uffed" +
    "\015\uffed\017\uffed\021\034\022\026\023\037\024\030\033" +
    "\uffed\034\uffed\040\uffed\041\uffed\044\uffed\045\uffed\047\uffed" +
    "\050\uffed\054\uffed\055\uffed\056\uffed\001\002\000\054\002" +
    "\uffe8\007\uffe8\011\uffe8\013\uffe8\015\uffe8\017\uffe8\021\034" +
    "\022\026\023\037\024\030\033\uffe8\034\uffe8\040\uffe8\041" +
    "\uffe8\044\uffe8\045\uffe8\047\uffe8\050\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\001\002\000\054\002\uffe9\007\uffe9\011\uffe9\013" +
    "\uffe9\015\uffe9\017\uffe9\021\034\022\026\023\037\024\030" +
    "\033\uffe9\034\uffe9\040\uffe9\041\uffe9\044\uffe9\045\uffe9\047" +
    "\uffe9\050\uffe9\054\uffe9\055\uffe9\056\uffe9\001\002\000\070" +
    "\002\uffe5\007\uffe5\011\uffe5\013\uffe5\015\uffe5\017\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\040\uffe5\041" +
    "\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\001\002\000\070\002\uffee\007\uffee\011\uffee\013" +
    "\uffee\015\uffee\017\uffee\021\034\022\026\023\037\024\030" +
    "\025\033\026\032\027\040\030\035\031\036\032\031\033" +
    "\uffee\034\uffee\040\uffee\041\uffee\044\uffee\045\uffee\047\uffee" +
    "\050\uffee\054\uffee\055\uffee\056\uffee\001\002\000\070\002" +
    "\uffe4\007\uffe4\011\uffe4\013\uffe4\015\uffe4\017\uffe4\021\uffe4" +
    "\022\uffe4\023\037\024\030\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\040\uffe4\041\uffe4" +
    "\044\uffe4\045\uffe4\047\uffe4\050\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\001\002\000\076\002\uffd8\007\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\040\uffd8\041\uffd8\044" +
    "\uffd8\045\uffd8\047\uffd8\050\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\001\002\000\034\013\060\021\034\022\026\023\037\024" +
    "\030\025\033\026\032\027\040\030\035\031\036\032\031" +
    "\033\027\034\041\001\002\000\076\002\uffd7\007\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\040\uffd7" +
    "\041\uffd7\044\uffd7\045\uffd7\047\uffd7\050\uffd7\054\uffd7\055" +
    "\uffd7\056\uffd7\001\002\000\012\047\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\001\002\000\012\047\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\001\002\000\012\047\uffbb\054\072\055\uffbb\056\uffbb" +
    "\001\002\000\004\047\201\001\002\000\004\004\164\001" +
    "\002\000\004\004\145\001\002\000\012\047\uffd0\054\uffd0" +
    "\055\uffd0\056\066\001\002\000\012\047\uffd5\054\072\055" +
    "\065\056\066\001\002\000\012\047\uffd2\054\uffd2\055\uffd2" +
    "\056\uffd2\001\002\000\004\004\073\001\002\000\004\014" +
    "\074\001\002\000\006\004\076\015\075\001\002\000\006" +
    "\010\130\025\127\001\002\000\004\010\115\001\002\000" +
    "\004\015\100\001\002\000\006\010\102\025\101\001\002" +
    "\000\030\004\014\005\011\006\005\014\016\022\004\037" +
    "\013\042\006\043\007\046\017\052\021\053\010\001\002" +
    "\000\010\004\103\057\104\060\105\001\002\000\004\025" +
    "\112\001\002\000\004\025\110\001\002\000\004\025\106" +
    "\001\002\000\030\004\014\005\011\006\005\014\016\022" +
    "\004\037\013\042\006\043\007\046\017\052\021\053\010" +
    "\001\002\000\042\021\034\022\026\023\037\024\030\025" +
    "\033\026\032\027\040\030\035\031\036\032\031\033\027" +
    "\034\041\047\uffb8\054\uffb8\055\uffb8\056\uffb8\001\002\000" +
    "\030\004\014\005\011\006\005\014\016\022\004\037\013" +
    "\042\006\043\007\046\017\052\021\053\010\001\002\000" +
    "\042\021\034\022\026\023\037\024\030\025\033\026\032" +
    "\027\040\030\035\031\036\032\031\033\027\034\041\047" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\001\002\000\030\004\014" +
    "\005\011\006\005\014\016\022\004\037\013\042\006\043" +
    "\007\046\017\052\021\053\010\001\002\000\042\021\034" +
    "\022\026\023\037\024\030\025\033\026\032\027\040\030" +
    "\035\031\036\032\031\033\027\034\041\047\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\001\002\000\042\021\034\022\026\023" +
    "\037\024\030\025\033\026\032\027\040\030\035\031\036" +
    "\032\031\033\027\034\041\047\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\001\002\000\010\004\116\057\117\060\120\001\002" +
    "\000\010\007\125\015\uffc5\017\uffc5\001\002\000\010\007" +
    "\123\015\uffc3\017\uffc3\001\002\000\010\007\121\015\uffc4" +
    "\017\uffc4\001\002\000\004\004\076\001\002\000\006\015" +
    "\uffc1\017\uffc1\001\002\000\004\004\076\001\002\000\006" +
    "\015\uffc0\017\uffc0\001\002\000\004\004\076\001\002\000" +
    "\006\015\uffc2\017\uffc2\001\002\000\030\004\014\005\011" +
    "\006\005\014\016\022\004\037\013\042\006\043\007\046" +
    "\017\052\021\053\010\001\002\000\010\004\131\057\132" +
    "\060\133\001\002\000\004\025\140\001\002\000\004\025" +
    "\136\001\002\000\004\025\134\001\002\000\030\004\014" +
    "\005\011\006\005\014\016\022\004\037\013\042\006\043" +
    "\007\046\017\052\021\053\010\001\002\000\042\021\034" +
    "\022\026\023\037\024\030\025\033\026\032\027\040\030" +
    "\035\031\036\032\031\033\027\034\041\047\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\001\002\000\030\004\014\005\011\006" +
    "\005\014\016\022\004\037\013\042\006\043\007\046\017" +
    "\052\021\053\010\001\002\000\042\021\034\022\026\023" +
    "\037\024\030\025\033\026\032\027\040\030\035\031\036" +
    "\032\031\033\027\034\041\047\uffb3\054\uffb3\055\uffb3\056" +
    "\uffb3\001\002\000\030\004\014\005\011\006\005\014\016" +
    "\022\004\037\013\042\006\043\007\046\017\052\021\053" +
    "\010\001\002\000\042\021\034\022\026\023\037\024\030" +
    "\025\033\026\032\027\040\030\035\031\036\032\031\033" +
    "\027\034\041\047\uffb5\054\uffb5\055\uffb5\056\uffb5\001\002" +
    "\000\042\021\034\022\026\023\037\024\030\025\033\026" +
    "\032\027\040\030\035\031\036\032\031\033\027\034\041" +
    "\047\uffb2\054\uffb2\055\uffb2\056\uffb2\001\002\000\004\047" +
    "\uffd4\001\002\000\012\047\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\001\002\000\004\025\146\001\002\000\014\004\147\016" +
    "\150\036\154\057\151\060\153\001\002\000\012\047\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\001\002\000\006\004\076\017" +
    "\162\001\002\000\012\047\uffc6\054\uffc6\055\uffc6\056\uffc6" +
    "\001\002\000\012\047\uffce\054\uffce\055\uffce\056\uffce\001" +
    "\002\000\012\047\uffc7\054\uffc7\055\uffc7\056\uffc7\001\002" +
    "\000\004\051\155\001\002\000\010\004\156\057\157\060" +
    "\160\001\002\000\012\047\uffca\054\uffca\055\uffca\056\uffca" +
    "\001\002\000\012\047\uffc8\054\uffc8\055\uffc8\056\uffc8\001" +
    "\002\000\012\047\uffc9\054\uffc9\055\uffc9\056\uffc9\001\002" +
    "\000\004\017\163\001\002\000\012\047\uffcb\054\uffcb\055" +
    "\uffcb\056\uffcb\001\002\000\012\047\uffcc\054\uffcc\055\uffcc" +
    "\056\uffcc\001\002\000\006\010\165\035\166\001\002\000" +
    "\010\004\170\057\171\060\172\001\002\000\030\004\014" +
    "\005\011\006\005\014\016\022\004\037\013\042\006\043" +
    "\007\046\017\052\021\053\010\001\002\000\042\021\034" +
    "\022\026\023\037\024\030\025\033\026\032\027\040\030" +
    "\035\031\036\032\031\033\027\034\041\047\uffbe\054\uffbe" +
    "\055\uffbe\056\uffbe\001\002\000\004\035\177\001\002\000" +
    "\004\035\175\001\002\000\004\035\173\001\002\000\030" +
    "\004\014\005\011\006\005\014\016\022\004\037\013\042" +
    "\006\043\007\046\017\052\021\053\010\001\002\000\042" +
    "\021\034\022\026\023\037\024\030\025\033\026\032\027" +
    "\040\030\035\031\036\032\031\033\027\034\041\047\uffbd" +
    "\054\uffbd\055\uffbd\056\uffbd\001\002\000\030\004\014\005" +
    "\011\006\005\014\016\022\004\037\013\042\006\043\007" +
    "\046\017\052\021\053\010\001\002\000\042\021\034\022" +
    "\026\023\037\024\030\025\033\026\032\027\040\030\035" +
    "\031\036\032\031\033\027\034\041\047\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\001\002\000\030\004\014\005\011\006\005" +
    "\014\016\022\004\037\013\042\006\043\007\046\017\052" +
    "\021\053\010\001\002\000\042\021\034\022\026\023\037" +
    "\024\030\025\033\026\032\027\040\030\035\031\036\032" +
    "\031\033\027\034\041\047\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\001\002\000\032\004\014\005\011\006\005\014\016\022" +
    "\004\037\013\042\006\043\007\046\017\050\204\052\021" +
    "\053\010\001\002\000\004\050\207\001\002\000\040\011" +
    "\205\015\uffdf\021\034\022\026\023\037\024\030\025\033" +
    "\026\032\027\040\030\035\031\036\032\031\033\027\034" +
    "\041\050\uffdf\001\002\000\070\002\ufffe\007\ufffe\011\ufffe" +
    "\013\ufffe\015\ufffe\017\ufffe\021\ufffe\022\ufffe\023\ufffe\024" +
    "\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe" +
    "\033\ufffe\034\ufffe\040\ufffe\041\ufffe\044\ufffe\045\ufffe\047" +
    "\ufffe\050\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002\000\030" +
    "\004\014\005\011\006\005\014\016\022\004\037\013\042" +
    "\006\043\007\046\017\052\021\053\010\001\002\000\006" +
    "\015\uffde\050\uffde\001\002\000\070\002\uffff\007\uffff\011" +
    "\uffff\013\uffff\015\uffff\017\uffff\021\uffff\022\uffff\023\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032" +
    "\uffff\033\uffff\034\uffff\040\uffff\041\uffff\044\uffff\045\uffff" +
    "\047\uffff\050\uffff\054\uffff\055\uffff\056\uffff\001\002\000" +
    "\012\047\uffba\054\uffba\055\uffba\056\uffba\001\002\000\070" +
    "\002\ufff2\007\ufff2\011\ufff2\013\ufff2\015\ufff2\017\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\040\ufff2\041" +
    "\ufff2\044\ufff2\045\ufff2\047\ufff2\050\ufff2\054\ufff2\055\ufff2" +
    "\056\ufff2\001\002\000\004\015\213\001\002\000\070\002" +
    "\ufff3\007\ufff3\011\ufff3\013\ufff3\015\ufff3\017\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\040\ufff3\041\ufff3" +
    "\044\ufff3\045\ufff3\047\ufff3\050\ufff3\054\ufff3\055\ufff3\056" +
    "\ufff3\001\002\000\006\004\231\017\232\001\002\000\032" +
    "\004\014\005\011\006\005\014\016\015\224\022\004\037" +
    "\013\042\006\043\007\046\017\052\021\053\010\001\002" +
    "\000\030\004\014\005\011\006\005\014\016\022\004\037" +
    "\013\042\006\043\007\046\017\052\021\053\010\001\002" +
    "\000\034\013\220\021\034\022\026\023\037\024\030\025" +
    "\033\026\032\027\040\030\035\031\036\032\031\033\027" +
    "\034\041\001\002\000\100\002\uffd6\007\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\040\uffd6\041\uffd6" +
    "\044\uffd6\045\uffd6\047\uffd6\050\uffd6\051\221\054\uffd6\055" +
    "\uffd6\056\uffd6\001\002\000\030\004\014\005\011\006\005" +
    "\014\016\022\004\037\013\042\006\043\007\046\017\052" +
    "\021\053\010\001\002\000\070\002\ufff6\007\ufff6\011\ufff6" +
    "\013\ufff6\015\ufff6\017\ufff6\021\034\022\026\023\037\024" +
    "\030\025\033\026\032\027\040\030\035\031\036\032\031" +
    "\033\027\034\041\040\ufff6\041\ufff6\044\ufff6\045\ufff6\047" +
    "\ufff6\050\ufff6\054\ufff6\055\ufff6\056\ufff6\001\002\000\004" +
    "\015\230\001\002\000\070\002\ufff4\007\ufff4\011\ufff4\013" +
    "\ufff4\015\ufff4\017\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\040\ufff4\041\ufff4\044\ufff4\045\ufff4\047\ufff4" +
    "\050\ufff4\054\ufff4\055\ufff4\056\ufff4\001\002\000\036\007" +
    "\226\015\uffdd\021\034\022\026\023\037\024\030\025\033" +
    "\026\032\027\040\030\035\031\036\032\031\033\027\034" +
    "\041\001\002\000\030\004\014\005\011\006\005\014\016" +
    "\022\004\037\013\042\006\043\007\046\017\052\021\053" +
    "\010\001\002\000\004\015\uffdc\001\002\000\070\002\ufff5" +
    "\007\ufff5\011\ufff5\013\ufff5\015\ufff5\017\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\040\ufff5\041\ufff5\044" +
    "\ufff5\045\ufff5\047\ufff5\050\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\001\002\000\004\025\235\001\002\000\070\002\ufff7\007" +
    "\ufff7\011\ufff7\013\ufff7\015\ufff7\017\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\040\ufff7\041\ufff7\044\ufff7" +
    "\045\ufff7\047\ufff7\050\ufff7\054\ufff7\055\ufff7\056\ufff7\001" +
    "\002\000\004\017\234\001\002\000\070\002\ufff8\007\ufff8" +
    "\011\ufff8\013\ufff8\015\ufff8\017\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\040\ufff8\041\ufff8\044\ufff8\045" +
    "\ufff8\047\ufff8\050\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002" +
    "\000\030\004\014\005\011\006\005\014\016\022\004\037" +
    "\013\042\006\043\007\046\017\052\021\053\010\001\002" +
    "\000\036\007\237\017\uffdb\021\034\022\026\023\037\024" +
    "\030\025\033\026\032\027\040\030\035\031\036\032\031" +
    "\033\027\034\041\001\002\000\004\004\231\001\002\000" +
    "\004\017\uffda\001\002\000\034\021\034\022\026\023\037" +
    "\024\030\025\033\026\032\027\040\030\035\031\036\032" +
    "\031\033\027\034\041\040\242\001\002\000\030\004\014" +
    "\005\011\006\005\014\016\022\004\037\013\042\006\043" +
    "\007\046\017\052\021\053\010\001\002\000\070\002\ufffa" +
    "\007\ufffa\011\ufffa\013\ufffa\015\ufffa\017\ufffa\021\034\022" +
    "\026\023\037\024\030\025\033\026\032\027\040\030\035" +
    "\031\036\032\031\033\027\034\041\040\ufffa\041\244\044" +
    "\ufffa\045\ufffa\047\ufffa\050\ufffa\054\ufffa\055\ufffa\056\ufffa" +
    "\001\002\000\030\004\014\005\011\006\005\014\016\022" +
    "\004\037\013\042\006\043\007\046\017\052\021\053\010" +
    "\001\002\000\070\002\ufff9\007\ufff9\011\ufff9\013\ufff9\015" +
    "\ufff9\017\ufff9\021\034\022\026\023\037\024\030\025\033" +
    "\026\032\027\040\030\035\031\036\032\031\033\027\034" +
    "\041\040\ufff9\041\ufff9\044\ufff9\045\ufff9\047\ufff9\050\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\001\002\000\004\002\001\001" +
    "\002\000\004\035\250\001\002\000\030\004\014\005\011" +
    "\006\005\014\016\022\004\037\013\042\006\043\007\046" +
    "\017\052\021\053\010\001\002\000\034\021\034\022\026" +
    "\023\037\024\030\025\033\026\032\027\040\030\035\031" +
    "\036\032\031\033\027\034\041\044\252\001\002\000\030" +
    "\004\014\005\011\006\005\014\016\022\004\037\013\042" +
    "\006\043\007\046\017\052\021\053\010\001\002\000\034" +
    "\021\034\022\026\023\037\024\030\025\033\026\032\027" +
    "\040\030\035\031\036\032\031\033\027\034\041\045\254" +
    "\001\002\000\030\004\014\005\011\006\005\014\016\022" +
    "\004\037\013\042\006\043\007\046\017\052\021\053\010" +
    "\001\002\000\070\002\ufffc\007\ufffc\011\ufffc\013\ufffc\015" +
    "\ufffc\017\ufffc\021\034\022\026\023\037\024\030\025\033" +
    "\026\032\027\040\030\035\031\036\032\031\033\027\034" +
    "\041\040\ufffc\041\ufffc\044\ufffc\045\ufffc\047\ufffc\050\ufffc" +
    "\054\ufffc\055\ufffc\056\ufffc\001\002\000\034\021\034\022" +
    "\026\023\037\024\030\025\033\026\032\027\040\030\035" +
    "\031\036\032\031\033\027\034\041\045\257\001\002\000" +
    "\030\004\014\005\011\006\005\014\016\022\004\037\013" +
    "\042\006\043\007\046\017\052\021\053\010\001\002\000" +
    "\070\002\ufffb\007\ufffb\011\ufffb\013\ufffb\015\ufffb\017\ufffb" +
    "\021\034\022\026\023\037\024\030\025\033\026\032\027" +
    "\040\030\035\031\036\032\031\033\027\034\041\040\ufffb" +
    "\041\ufffb\044\ufffb\045\ufffb\047\ufffb\050\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\001\002\000\070\002\uffe3\007\uffe3\011\uffe3" +
    "\013\uffe3\015\uffe3\017\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\040\uffe3\041\uffe3\044\uffe3\045\uffe3\047" +
    "\uffe3\050\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\010\003\014\004\011\021\017\001\001\000" +
    "\006\003\260\021\017\001\001\000\002\001\001\000\006" +
    "\003\255\021\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\240" +
    "\021\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\202\005\211\021\017\001\001\000\020\007\067" +
    "\010\063\011\066\012\061\013\070\014\062\015\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\056" +
    "\021\017\001\001\000\002\001\001\000\006\003\024\021" +
    "\017\001\001\000\002\001\001\000\006\003\054\021\017" +
    "\001\001\000\006\003\053\021\017\001\001\000\006\003" +
    "\052\021\017\001\001\000\006\003\051\021\017\001\001" +
    "\000\006\003\050\021\017\001\001\000\006\003\047\021" +
    "\017\001\001\000\006\003\046\021\017\001\001\000\006" +
    "\003\045\021\017\001\001\000\006\003\044\021\017\001" +
    "\001\000\006\003\043\021\017\001\001\000\006\003\042" +
    "\021\017\001\001\000\006\003\041\021\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\062\015\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\066" +
    "\012\143\001\001\000\020\007\067\010\142\011\066\012" +
    "\061\013\070\014\062\015\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\113\021\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\106\021\017\001\001\000\002\001" +
    "\001\000\006\003\110\021\017\001\001\000\002\001\001" +
    "\000\006\003\112\021\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\121\001\001\000" +
    "\002\001\001\000\004\017\123\001\001\000\002\001\001" +
    "\000\004\017\125\001\001\000\002\001\001\000\006\003" +
    "\141\021\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\134\021" +
    "\017\001\001\000\002\001\001\000\006\003\136\021\017" +
    "\001\001\000\002\001\001\000\006\003\140\021\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\151\001" +
    "\001\000\002\001\001\000\004\017\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\166\021\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\173" +
    "\021\017\001\001\000\002\001\001\000\006\003\175\021" +
    "\017\001\001\000\002\001\001\000\006\003\177\021\017" +
    "\001\001\000\002\001\001\000\010\003\202\005\201\021" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\202\005\205\021\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\232\001\001\000\010\003\224\006\222\021\017\001\001" +
    "\000\006\003\216\021\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\221\021\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\224\006\226\021\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\235" +
    "\021\017\001\001\000\002\001\001\000\004\020\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\242" +
    "\021\017\001\001\000\002\001\001\000\006\003\244\021" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\250\021\017\001\001\000\002\001" +
    "\001\000\006\003\252\021\017\001\001\000\002\001\001" +
    "\000\006\003\254\021\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\257\021\017\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


	public Exp parseResult;
	Yylex lexer;
	ErrorMsg.ErrorMsg errorMsg;
	
	public parser(Yylex l, ErrorMsg.ErrorMsg err) {
		this();
		errorMsg=err;
		lexer=l;
	}
	
	public void synerr_print(java_cup.runtime.Symbol s) {
		err_print("Syntax error (" + s.sym + ")", s);
	}
	public void err_print(String message, java_cup.runtime.Symbol info) {
		errorMsg.error(info.left, message);
	}

	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 
	static Symbol.Symbol sym(String s) {
	return Symbol.Symbol.symbol(s);
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // function_decl ::= FUNCTION ID LBRACK RBRACK EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionDec(fleft, Symbol.Symbol.symbol(id), null, null, e, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // function_decl ::= FUNCTION ID LBRACK RBRACK COLON STRING EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionDec(fleft, Symbol.Symbol.symbol(id1), null, new NameTy(sleft, Symbol.Symbol.symbol("string")), e, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // function_decl ::= FUNCTION ID LBRACK RBRACK COLON INT EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionDec(fleft, Symbol.Symbol.symbol(id1), null, new NameTy(ileft, Symbol.Symbol.symbol("int")), e, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // function_decl ::= FUNCTION ID LBRACK RBRACK COLON ID EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionDec(fleft, Symbol.Symbol.symbol(id1), null, new NameTy(id2left, Symbol.Symbol.symbol(id2)), e, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // function_decl ::= FUNCTION ID LBRACK type_fields RBRACK EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionDec(fleft, Symbol.Symbol.symbol(id), tf, null, e, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // function_decl ::= FUNCTION ID LBRACK type_fields RBRACK COLON STRING EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionDec(fleft, Symbol.Symbol.symbol(id1), tf, new NameTy(sleft, Symbol.Symbol.symbol("string")), e, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // function_decl ::= FUNCTION ID LBRACK type_fields RBRACK COLON INT EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionDec(fleft, Symbol.Symbol.symbol(id1), tf, new NameTy(ileft, Symbol.Symbol.symbol("int")), e, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // function_decl ::= FUNCTION ID LBRACK type_fields RBRACK COLON ID EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionDec(fleft, Symbol.Symbol.symbol(id1), tf, new NameTy(id2left, Symbol.Symbol.symbol(id2)), e, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*function_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // function_decllist ::= function_decl function_decllist 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionDec f = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FunctionDec fl = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionDec(f.pos, f.name, f.params, f.result, f.body, fl); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*function_decllist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // function_decllist ::= function_decl 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FunctionDec f = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*function_decllist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variable_decl ::= VAR ID COLON STRING ASSIGN expr 
            {
              VarDec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new VarDec(vleft, Symbol.Symbol.symbol(id1), new NameTy(id1left, Symbol.Symbol.symbol("string")), e); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*variable_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variable_decl ::= VAR ID COLON INT ASSIGN expr 
            {
              VarDec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new VarDec(vleft, Symbol.Symbol.symbol(id1), new NameTy(id1left, Symbol.Symbol.symbol("int")), e); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*variable_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // variable_decl ::= VAR ID ASSIGN expr 
            {
              VarDec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new VarDec(vleft, Symbol.Symbol.symbol(id), null, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*variable_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variable_decl ::= VAR ID COLON ID ASSIGN expr 
            {
              VarDec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new VarDec(vleft, Symbol.Symbol.symbol(id1), new NameTy(id1left, Symbol.Symbol.symbol(id2)), e); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*variable_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type_fields ::= ID COLON STRING COMMA type_fields 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FieldList(i1left, Symbol.Symbol.symbol(i1), Symbol.Symbol.symbol("string"), tf); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*type_fields*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type_fields ::= ID COLON INT COMMA type_fields 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FieldList(i1left, Symbol.Symbol.symbol(i1), Symbol.Symbol.symbol("int"), tf); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*type_fields*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type_fields ::= ID COLON ID COMMA type_fields 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FieldList(i1left, Symbol.Symbol.symbol(i1), Symbol.Symbol.symbol(i2), tf); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*type_fields*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type_fields ::= ID COLON STRING 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FieldList(i1left, Symbol.Symbol.symbol(i1), Symbol.Symbol.symbol("string"), null); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*type_fields*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type_fields ::= ID COLON INT 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FieldList(i1left, Symbol.Symbol.symbol(i1), Symbol.Symbol.symbol("int"), null); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*type_fields*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type_fields ::= ID COLON ID 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FieldList(i1left, Symbol.Symbol.symbol(i1), Symbol.Symbol.symbol(i2), null); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*type_fields*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= STRING 
            {
              Ty RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NameTy(sleft, Symbol.Symbol.symbol("string")); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= INT 
            {
              Ty RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NameTy(ileft, Symbol.Symbol.symbol("int")); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= ARRAY OF STRING 
            {
              Ty RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayTy(aleft, Symbol.Symbol.symbol("string")); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= ARRAY OF INT 
            {
              Ty RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayTy(aleft, Symbol.Symbol.symbol("int")); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= ARRAY OF ID 
            {
              Ty RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayTy(aleft, Symbol.Symbol.symbol(i)); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= LBRACE RBRACE 
            {
              Ty RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordTy(lleft, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= LBRACE type_fields RBRACE 
            {
              Ty RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordTy(lleft, tf);  
              CUP$parser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= ID 
            {
              Ty RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NameTy(idleft, Symbol.Symbol.symbol(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_decl ::= TYPE ID EQ type 
            {
              TypeDec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TypeDec(tleft, Symbol.Symbol.symbol(id), ty, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*type_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type_decllist ::= type_decl type_decllist 
            {
              TypeDec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeDec t = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TypeDec tl = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TypeDec(t.pos, t.name, t.ty, tl); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*type_decllist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type_decllist ::= type_decl 
            {
              TypeDec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TypeDec t = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*type_decllist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decl ::= function_decllist 
            {
              Dec RESULT = null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FunctionDec fd = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = fd; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decl ::= variable_decl 
            {
              Dec RESULT = null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		VarDec vd = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = vd; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // decl ::= type_decllist 
            {
              Dec RESULT = null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TypeDec td = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = td; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // decl_list ::= decl decl_list 
            {
              DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DecList(d, dl);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // decl_list ::= decl 
            {
              DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DecList(d, null);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lvalue ::= ID LPAREN expr RPAREN 
            {
              Var RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SubscriptVar(ileft,new SimpleVar(ileft,Symbol.Symbol.symbol(i)),e); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*lvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lvalue ::= lvalue LPAREN expr RPAREN 
            {
              Var RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SubscriptVar(lleft, l, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*lvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lvalue ::= lvalue DOT ID 
            {
              Var RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FieldVar(lleft, l, Symbol.Symbol.symbol(id));
              CUP$parser$result = new java_cup.runtime.Symbol(15/*lvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lvalue ::= ID 
            {
              Var RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SimpleVar(idleft, Symbol.Symbol.symbol(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*lvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // field_list ::= ID EQ expr COMMA field_list 
            {
              FieldExpList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FieldExpList fl = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FieldExpList(idleft, Symbol.Symbol.symbol(id), e, fl); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // field_list ::= ID EQ expr 
            {
              FieldExpList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FieldExpList(idleft, Symbol.Symbol.symbol(id), e, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr_list ::= expr COMMA expr_list 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpList(e, el); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_list ::= expr 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpList(e, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_seq ::= expr SEMICOLON expr_seq 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpList es = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpList(e, es); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr_seq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_seq ::= expr 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpList(e, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr_seq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= NUM 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IntExp(ileft, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= STR 
            {
              Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new StringExp(sleft, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= NIL 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NilExp(nleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= MINUS expr 
            {
              Exp RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(mleft, new IntExp(e.pos, 0), OpExp.MINUS, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr MINUS expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.MINUS, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr DIVIDE expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.DIV, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr TIMES expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.MUL, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr PLUS expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.PLUS, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr NEQ expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.NE, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr GE expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.GE, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr GT expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.GT, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr LE expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.LE, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr LT expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.LT, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr EQ expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1.pos, e1, OpExp.EQ, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr AND expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IfExp(e1.pos, e1, e2, new IntExp(e1.pos, 0)); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr OR expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IfExp(e1.pos, e1, new IntExp(e1.pos, 1), e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= lvalue ASSIGN expr 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AssignExp(lleft, l, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= lvalue 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new VarExp(l.pos, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= LBRACK RBRACK 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SeqExp(lleft, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= LBRACK expr_seq RBRACK 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList es = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SeqExp(lleft, es); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= ID LBRACK RBRACK 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallExp(ileft, Symbol.Symbol.symbol(i), null); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= ID LBRACK expr_list RBRACK 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new CallExp(ileft, Symbol.Symbol.symbol(i), el);
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= ID LPAREN expr RPAREN OF expr 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayExp(ileft, Symbol.Symbol.symbol(i), e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= ID LBRACE RBRACE 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RecordExp(ileft, Symbol.Symbol.symbol(i), null); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= ID LBRACE field_list RBRACE 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldExpList fl = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordExp(ileft, Symbol.Symbol.symbol(i), fl); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= IF expr THEN expr ELSE expr 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IfExp(ileft, e1, e2, e3); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= IF expr THEN expr 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IfExp(ileft, e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= WHILE expr DO expr 
            {
              Exp RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new WhileExp(wleft, e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= FOR ID ASSIGN expr TO expr DO expr 
            {
              Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForExp(fleft, new VarDec(ileft, Symbol.Symbol.symbol(i), new NameTy(ileft, Symbol.Symbol.symbol("int")), e1), e2, e3); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= BREAK 
            {
              Exp RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BreakExp(bleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= LET decl_list IN END 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new LetExp(lleft, dl, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= LET decl_list IN expr_seq END 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList es = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LetExp(lleft, dl, new SeqExp(esleft, es)); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= expr 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.parseResult = (Exp)e; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

